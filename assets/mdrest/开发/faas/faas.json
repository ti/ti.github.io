{"date":"2018-09-26T00:00:00Z","html":"\u003cp\u003e自从K8S之后，各类*aaS的架构设计层出不穷，相信后端的小伙伴已经对各种架构耳熟能详，但是如果说有一个应用，真正让“Serverless（无服务架构）”得到大范围落地，那就是“小程序•云开发”（以下简称小程序），和其他Serverless架构相比，小程序的以下特性让我产生了浓厚的兴趣。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e对大部分个人类应用，80%以上应用逻辑无需后端编码。\u003c/li\u003e\n\u003cli\u003e依托微信强大的账号生态，“真正实现低成本的软件开发”\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e本文就以“小程序•云开发”为启发，对“无服务架构”功能和愿景做\u003cstrong\u003e补充\u003c/strong\u003e和总结，重点介绍，如何综合公司SaaS和FaaS的能力，如何实现低成本的软件迭代。\u003c/p\u003e\n\n\u003cp\u003e内容概要：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFaaS平台的用户认证和授权\u003c/li\u003e\n\u003cli\u003e数据库存储功能\u003c/li\u003e\n\u003cli\u003e文件存储功能\u003c/li\u003e\n\u003cli\u003e云函数（cloud functions）\u003c/li\u003e\n\u003cli\u003e与其他架构模式相结合快速开发应用\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e例如：小程序•云开发的入口界面，包含了常见的后端服务逻辑。\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/faas_01.png\" alt=\"faas_01\" title=\"小程序•云开发入口界面\"/\u003e\u003cdiv class=\"caption\"\u003e小程序•云开发入口界面\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch2 id=\"1-serverless简介\"\u003e1. Serverless简介\u003c/h2\u003e\n\n\u003cp\u003e如同许多新的概念一样，Serverless目前还没有一个普遍公认的权威的定义。 最新的一个定义是这样描述的：“无服务器架构是基于互联网的系统，其中应用开发不使用常规的服务进程。 目前看来，无服务器平台\u003cstrong\u003e实质\u003c/strong\u003e是将公共的的服务器端技术抽象，并开放函数计算接入的伸缩平台。常见的FaaS平台提供了以下基础能力：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e用户授权和管理\u003c/li\u003e\n\u003cli\u003e数据库存取 （JSON数据的Restful抽象封装）\u003c/li\u003e\n\u003cli\u003e文件存取\u003c/li\u003e\n\u003cli\u003e消息推送（可选）\u003c/li\u003e\n\u003cli\u003e云函数（类似：Fission）\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e可以看到FaaS平台实质是将我们常见的业务，归纳为“用户”，“数据”，“函数”， 将常见“用户数据的增删改查”，进一步抽象和封装。\u003c/p\u003e\n\n\u003ch2 id=\"2-用户认证和管理\"\u003e2. 用户认证和管理\u003c/h2\u003e\n\n\u003cp\u003e纯客户端的网络数据读写，主要依赖于一个完善的账号认证体系，因此账户认证是“无服务平台的基础”， 以下界面是一个Serviceless平台所提供的用户管理界面，包含登录，登录方法配置，和消息模板。\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/auth_01.png\" alt=\"authauth_01\" title=\"用户管理\"/\u003e\u003cdiv class=\"caption\"\u003e用户管理\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e用户管理，查看当前平台注册的用户数量，主要特性：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e支持管理员/用户权限配置\u003c/li\u003e\n\u003cli\u003e支持从邮箱，手机，微信，Facebook等平台注册用户（见下图）\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/auth_02.png\" alt=\"aauth_02\" title=\"登录方式配置\"/\u003e\u003cdiv class=\"caption\"\u003e登录方式配置\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e登录方式配置， 支持配置自己的第三方SNS平台key和secret，特点：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e支持对每种登录方式进行打开或关闭\u003c/li\u003e\n\u003cli\u003e支持注册配额限制。\u003c/li\u003e\n\u003cli\u003e支持多种登录账号的融合。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/auth_03.png\" alt=\"auth_3\" title=\"消息模板配置\"/\u003e\u003cdiv class=\"caption\"\u003e消息模板配置\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e消息模板配置。 将账户平台所涉及的通知和验证以模版的形式提供自定义接口， 支持“多语言模板配置”， 支持短信发送提供商配置。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e从界面上可以看到，Serviceless至少从用户管理，登录方法和模板配置三个界面对常见的账户服务进行抽象，但是作为Serviceless的基础，账户的逻辑远没有界面上展示的那样简单，这个完整的账号服务，至少包含了以下逻辑：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://www.oauth.com/oauth2-servers/access-tokens/password-grant/\"\u003eOAuth Password Credentials \u003c/a\u003e 用户密码授权逻辑。（包含多客户端，验证码，校验频次限制等）\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://oauth.net/2/grant-types/implicit/\"\u003eImplicit Credentials. \u003c/a\u003e  implicit 授权逻辑。（无需服务器端，可以通过客户端直接获取授权token）\u003c/li\u003e\n\u003cli\u003e跨域域名配置。账户登录接口作为服务，必须指定可调用域名，否则可能造成请求伪造攻击。\u003c/li\u003e\n\u003cli\u003e管理员和普通用户配置。 在大多数业务场景下，我们需要管理员去控制统计，数据清理等逻辑。\u003c/li\u003e\n\u003cli\u003e自定义第三方登录配置。允许用户通过少量的客户端代码，生成自己的第三方登录方法。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eimplicit 授权方式是一种前端安全的服务器架构的授权方式，这种授权方式，允许旗下多个子域名共享一套账号体系且共用一个登录界面。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e在某些复杂的场景下，我们需要用户服务的Oauth能力来保证用户数据的开放透明，例如：Google用户体系，他可以用于登录Youtube，Blogger，Google cloud的场景。 就目前技术层面而言，OAuth 2.0 是这方面做的最全面的一套标准。\u003c/p\u003e\n\n\u003ch2 id=\"3-数据库存取抽象\"\u003e3. 数据库存取抽象\u003c/h2\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/db_01.png\" alt=\"db_01\" title=\"数据库管理界面\"/\u003e\u003cdiv class=\"caption\"\u003e数据库管理界面\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e数据库管理界面，特点\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e支持自动生成 “_user” 字段\u003c/li\u003e\n\u003cli\u003eID为UUID\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/db_02.png\" alt=\"db_02\" title=\"数据库权限控制界面\"/\u003e\u003cdiv class=\"caption\"\u003e数据库权限控制界面\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e数据库权限配置管理界面，特点：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e将常见的增删改查逻辑在数据库配置层进行处理。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e可以从小程序•云开放的截图上粗略看到关于无服务程序在数据层的抽象逻辑是：将云端的Restful 增删改查，抽象为任意集合，这些集合的权限则基于： 管理员，创建者，所有用户三者角色进行设计。这些角色的配置如下：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e所有用户可读，仅创建者及管理员可写\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e适用场景：用户评论、用户公开信息等\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n\u003cli\u003e仅创建者及管理员可读写\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e适用场景：用户个人设置、用户订单管理等\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n\u003cli\u003e所有用户可读，仅管理员可写\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e适用场景：商品信息等\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n\u003cli\u003e仅管理员可读写\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e适用场景：后台流水数据等\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"安全相关补充逻辑\"\u003e安全相关补充逻辑\u003c/h3\u003e\n\n\u003cp\u003e当然，我们现实的使用场景中，几乎无可避免地进行关联查询和关联删除，因此，这部分逻辑抽象，可以通过上图中的索引完成，一个完成的无服务数据库逻辑如下：（大部分内容为博主脑补添加，小程序并未实现）\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e自动添加 “_user” 字段，标记用于标记用户权限控制。\u003c/li\u003e\n\u003cli\u003e允许创建外键删除逻辑。（例如：删除博客时，同时删除对应的评论和文件）\u003c/li\u003e\n\u003cli\u003e设置集合最大大小。例如：单个集合最大1kb，则用于防止客户端恶意攻击。\u003c/li\u003e\n\u003cli\u003e设置用户写入频次限制。例如：blog设置为“100条/天/用户”， 则表示：一个用户每天最多可以编写100条博客。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/db_03.png\" alt=\"db_03\" title=\"更加复杂的数据库关联索引\"/\u003e\u003cdiv class=\"caption\"\u003e更加复杂的数据库关联索引\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e总结：从这些信息可以看出纯粹的客户端读写数据库是在更粗粒度对数据权限进行控制，例如：只限制单个collection大小，并不会像常见的后端服务对每个字段进行规则描述。 这样的做的好处是，将用户数据过滤放到前端，适当的后端配置，可以使得钱后端开发难度达到平衡。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"4-文件存取\"\u003e4. 文件存取\u003c/h2\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/file_01.png\" alt=\"file_01\" title=\"小程序文件存取界面\"/\u003e\u003cdiv class=\"caption\"\u003e小程序文件存取界面\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/file_02.png\" alt=\"file_02\" title=\"小程序文件权限管理\"/\u003e\u003cdiv class=\"caption\"\u003e小程序文件权限管理\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e从界面可以看到，文件存取的逻辑和数据操作逻辑类型，在这里不多做描述，在我们实际使用中，我们需要注意以下两点：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e除了常见的权限管理外，还需要结合数据库存取的外键配置，防止垃圾数据的产生，例如，在当删除commit的集合时，则删除当前数据库文件操作，可以采用关联外键，或在程序中插入以下代码：\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e//删除评论时，同时删除所关联的文件。\ndb.commit.onRemove = function() {\n      //删除一条关联数据\n     files.RemoveID(this.data.file_id)\n     //删除多条关联数据\n     files.RemoveIDs(this.data.file_ids)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003col\u003e\n\u003cli\u003e文件进行CDN绑定，避免主站带宽被占满的情况。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"安全相关补充逻辑-1\"\u003e安全相关补充逻辑\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e允许为应用设置多个bucket\u003c/li\u003e\n\u003cli\u003e配置一个用户1小时内，最多可新增多少条数据\u003c/li\u003e\n\u003cli\u003e配置独立bucket 单个文件大小\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"5-云函数\"\u003e5. 云函数\u003c/h2\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/func_01.png\" alt=\"func_01\" title=\"微信云函数配置界面\"/\u003e\u003cdiv class=\"caption\"\u003e微信云函数配置界面\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e微信相比与其他Serverless平台的优势在于，依托于完善的微信鉴权体系，在大多数个人数据场景下，你无需创建自己的任何后端，但是不可避免一些复杂跨用户的业务或一些非数据类型的业务需要云端逻辑才能完成，因此这里简单下介绍下云函数的概念。\u003c/p\u003e\n\n\u003cp\u003e云函数是FaaS平台的基础，是将我们后端常见的额服务化思维，抽象到一个个具体的函数，然后由网关配置完成相关权限，频次控制，自动伸缩等内容。 例如：微信一个简单的云函数为：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e// 云函数入口函数\nexports.main = (event, context) =\u0026gt; {\n  var user =  event.userInfo.openId;  \n  console.log(event)\n  console.log(context)\n  return {\n    sum: event.a + event.b\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e例如：以亚马逊的Lambad为例，云函数逻辑大致为：\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/serverless-arch-baord.png\" alt=\"img\"/\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e后端的的业务通过Event Source 进行驱动，在架构设计时，我们会尽量减少“服务”在业务中的比重。那么“服务”应该出现在什么地方呢？ 请看我下一章补充。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e更多参考开源FaaS平台，https://\u003cstrong\u003efission\u003c/strong\u003e.io\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"6-架构补充\"\u003e6. 架构补充\u003c/h2\u003e\n\n\u003cp\u003e在普通的互联网应用中，FaaS的实质是将公用的功能模块进行抽象，让技术部门的精力集中在技术本身，例如：今日头条业务，主要职责将集中在推荐算法，迅雷下载，将主要集中在p2p技术的改进和优化，直播业务，主要业务集中在内容分发等。\u003c/p\u003e\n\n\u003cp\u003e在实际生产过程中，不存在单一的结构可以完美适配所有问题，因此给出以下开发建议：\u003c/p\u003e\n\n\u003ch3 id=\"开发建议\"\u003e开发建议：\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e对于简单的业务，例如：账本，笔记，订单等这类业务完全可以做到0服务器的形式进行开发，如果合理设置数据索引，甚至可以无需自行开发任何fuction。这类业务的特点是，用户只对自己的数据库负责，用户无法影响其他用户数据。\u003c/li\u003e\n\u003cli\u003e对于支付，直播打赏这类安全性比较高的业务，可以通过传统FaaS开发模式，快速完整第三方平台的对接。\u003c/li\u003e\n\u003cli\u003e对于：业务消息推送，短信发送可通过SaaS的单体架构形式开发。然后将服务能力按照用户权限逻辑注册到现有Serverless平台的基础组件。\u003c/li\u003e\n\u003cli\u003e对于复杂的业务，不建议使用Function架构进行开发，因为架构设计，函数之间通讯等问题，传统的微服务架构更加成熟。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e写在后面：本文旨在探索Serverless落地方案，与小程序•云开发的功能已经有很大的不同。文章内容会结合各种Serverless平台特性和实际开发中遇到的问题做说明，部分截图已经过二次修改，仅供参考。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"附-serverless的架构范式参考\"\u003e附: Serverless的架构范式参考\u003c/h2\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/0118-faas-02.png\" alt=\"img\" title=\"实时文件处理Serverless参考架构\"/\u003e\u003cdiv class=\"caption\"\u003e实时文件处理Serverless参考架构\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/0118-faas-03.png\" alt=\"img\" title=\"实时文件处理Serverless参考架构\"/\u003e\u003cdiv class=\"caption\"\u003e实时文件处理Serverless参考架构\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/0118-faas-04.png\" alt=\"img\" title=\"Web应用Serverless参考架构\"/\u003e\u003cdiv class=\"caption\"\u003eWeb应用Serverless参考架构\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/0118-faas-05.png\" alt=\"img\" title=\"物联网应用后台参考架构\"/\u003e\u003cdiv class=\"caption\"\u003e物联网应用后台参考架构\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/faas/assets/0118-faas-06.png\" alt=\"img\" title=\"实时流处理Serverless参考架构\"/\u003e\u003cdiv class=\"caption\"\u003e实时流处理Serverless参考架构\u003c/div\u003e\u003c/div\u003e\u003c/p\u003e\n","location":"开发/faas/faas","picture":"/开发/faas/assets/cover.jpg","tags":["架构","小程序"],"title":"从小程序•云开发谈谈Serverless架构在互联网公司的落地设计\n"}