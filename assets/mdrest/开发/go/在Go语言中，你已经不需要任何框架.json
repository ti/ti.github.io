{"date":"2018-08-08T00:00:00Z","html":"\u003cblockquote\u003e\n\u003cp\u003e经常有做Java的同事问我，说是习惯了 Java的 Spring Cloud生态， 在Go语言下，有没有这种大一统的开发框架呢，答案是肯定的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e得益于Go语言的简单自由， Go语言的发展初期，出现过很多我们熟悉的Web开发框架，你可能听说 mux，gin，beego等，在微服务大行其道之时，诞生了 go-micro，go-kit 等， 当然这些框架都是比较优秀的框架，也在很大程度上帮助企业快速上手Go语言开发。这些框架提供的功能主要有：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRestful API 路由\u003c/li\u003e\n\u003cli\u003e基于HTTP/2 JOSN的RPC通讯\u003c/li\u003e\n\u003cli\u003e服务的发现和治理\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e但是，时至今日，在云端k8s，Service Mesh大行其道之时，Go语言的生态也发生了翻天覆地的变化，很多之前优秀的开发框架逐渐被替代，就目前看来，在Go语言开发中，已经形成了以Google为核心的开发体系，这种模式以决定性的优势让众多的早期框架甚至其他Web开发形式变得暗淡失色。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eGRPC （负责云端业务接口的开发）\u003c/li\u003e\n\u003cli\u003eGrpcGateway (可以在几乎不修改业务代码的情况下，将你的Proto Service直接转换为 HTTP Restful Web API)\u003c/li\u003e\n\u003cli\u003e各种ES6的前端单页面框架负责UI渲染\u003c/li\u003e\n\u003cli\u003eIstio (负责Service Mesh的微服务相关工作)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e这种开发模式，虽然其他语言也可以实现GRPC相关功能， 但是得益于整个生态都是围绕着Go语言而展开的，在go语言中，你可以做到以下几点。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eGRPC的Service直接在进程内转换为 Restful API，而无需外层代理，也不用担心 JSON-\u0026gt;PB-\u0026gt; Struct 的性能损耗，你可以像之前使用Srping Cloud 那样使用GRPC生态，如果可能，你的服务甚至不用监听任何GRPC端口，你可以像写GRPC那样去编写一套“工整的，完美的” Restful API。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e代码示例：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-protobuf\"\u003eservice Say {\n    rpc Hello (Request) returns (Response) {\n        option (google.api.http) = {\n        \t//将你的GRPC转换为Restful API 的URL匹配\n\t\t\tpost: \u0026quot;/v1/greeter/hello/{id}\u0026quot;\n\t\t\tbody:\u0026quot;*\u0026quot;\n\t\t};\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003e//sayServer 业务的具体实现类\nsrv := \u0026amp;sayServer{}\nmux := grpcmux.NewServeMux()\n//注册到GO的HTTP MUX\npb.RegisterSayServerHandlerClient(context, mux.ServeMux, srv)\nhttp.ListenAndServe(\u0026quot;:8080\u0026quot;, mux)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003ecurl -X POST -d '{}' http://127.0.0.1:8080/v1/greeter/hello/12\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e值得一提的是，在这种模式下，GRPC支持将错误返回和Response解耦，错误不属于Reponse中的一个字段，错误属于独立的错误对象，你可以在通过proto文件定义自己的业务错误描述：\u003c/p\u003e\n\n\u003cp\u003e例如：调用成功返回【200】：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n    \u0026quot;name\u0026quot;:\u0026quot;Lee\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e调用失败则返回【400等】：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026quot;error\u0026quot;: \u0026quot;错误描述\u0026quot;,\n  \u0026quot;code\u0026quot;: 2\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eGoogle官方也对常见的错误处理做了定义， 具体可以参考：【GRPC标准错误定义】：\u003ca href=\"https://nanxi.li/#/page/%E5%BC%80%E5%8F%91/grpc/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"\u003ehttps://nanxi.li/#/page/%E5%BC%80%E5%8F%91/grpc/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDocker Scratch 自从Docker诞生以来， Go语言就以决定性的优势作为微服务开发的主要语言，一个重要的特征就是Scratch， 这种Docker模式下，允许你的程序以极简的形式发布，不用添加任何系统动态库和依赖，你的Docker镜像就是你的程序文件。 这种模式在其他语言中虽然也可以实现，但是大部分情况下，由于历史原因，我们无法保证它能健康地运行在没有任何依赖的linux环境下， 而go语言中，Scratch 几乎成了 标准。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e代码地址：\u003ca href=\"https://github.com/ti/noframe/tree/master/grpcmux/_exmaple\"\u003ehttps://github.com/ti/noframe/tree/master/grpcmux/_exmaple\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIstio 一种sidecar形式的服务治理方案，于Go语言架构无关，在这里不做赘述，后期会专门介绍上手教程\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"其他参考\"\u003e其他参考：\u003c/h2\u003e\n\n\u003cp\u003e代码地址：\u003ca href=\"https://github.com/ti/noframe/tree/master/grpcmux/_exmaple\"\u003ehttps://github.com/ti/noframe/tree/master/grpcmux/_exmaple\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eGrpcGateway： \u003ca href=\"https://github.com/grpc-ecosystem/grpc-gateway\"\u003ehttps://github.com/grpc-ecosystem/grpc-gateway\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIstio: \u003ca href=\"https://istio.io/zh/\"\u003ehttps://istio.io/zh/\u003c/a\u003e\u003c/p\u003e\n","location":"开发/go/在Go语言中，你已经不需要任何框架","tags":["go","框架"],"title":"在Go语言中，你已经不需要任何框架\n"}