{"author":"Cyeam","author_link":"https://rakyll.org/go-tool-flags/","date":"2018-04-16T00:00:00Z","html":"\u003cp\u003e你刚接触Go tools吗？或者你想扩展下你的知识面？这篇文章是关于Go tools的flags，这些flags每个人都应该知道。\u003c/p\u003e\n\n\u003cp\u003e免责声明：这篇文件可能有一些偏见。这是我个人常用的flags集合。我周边的人很难找到这些falgs的参考文档。如果你有更好的主意，可以在\u003ca href=\"https://twitter.com/rakyll\"\u003eTwitter\u003c/a\u003e上私信我。\u003c/p\u003e\n\n\u003ch2 id=\"go-build-x\"\u003e$ go build -x\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003e-x\u003c/code\u003e列出了go build触发的所有命令。\u003c/p\u003e\n\n\u003cp\u003e如果你对Go的工具链、使用跨平台编译器比较好奇，或者对传入外部编译器的flags不清楚，或者怀疑链接器有bug，那么使用\u003ccode\u003e-x\u003c/code\u003e来查看所有的触发。\u003c/p\u003e\n\n\u003ch2 id=\"go-build-x-1\"\u003e$ go build -x\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode\u003eWORK=/var/folders/00/1b8h8000h01000cxqpysvccm005d21/T/go-build600909754\nmkdir -p $WORK/hello/perf/_obj/\nmkdir -p $WORK/hello/perf/_obj/exe/\ncd /Users/jbd/src/hello/perf\n/Users/jbd/go/pkg/tool/darwin_amd64/compile -o $WORK/hello/perf.a -trimpath $WORK -p main -complete -buildid bbf8e880e7dd4114f42a7f57717f9ea5cc1dd18d -D _/Users/jbd/src/hello/perf -I $WORK -pack ./perf.go\ncd .\n/Users/jbd/go/pkg/tool/darwin_amd64/link -o $WORK/hello/perf/_obj/exe/a.out -L $WORK -extld=clang -buildmode=exe -buildid=bbf8e880e7dd4114f42a7f57717f9ea5cc1dd18d $WORK/hello/perf.a\nmv $WORK/hello/perf/_obj/exe/a.out perf\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"go-build-gcflags\"\u003e$go build -gcflags\u003c/h2\u003e\n\n\u003cp\u003e用来给Go编译器传入参数。\u003ccode\u003ego tool compile -help\u003c/code\u003e 列出了可以被传入编译器的所有的参数列表。\u003c/p\u003e\n\n\u003cp\u003e比如，为了禁止编译器优化和内联，你可以使用下面的gcfalgs：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ go build -gcflags=\u0026quot;-N -l\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e比如，为了检查代码中有哪些可以调优的选项，可以运行下面指令：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ go build -gcflags=\u0026quot;-m\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"go-test-v\"\u003e$go test -v\u003c/h2\u003e\n\n\u003cp\u003e它提供了非正式的测试输出，打印了测试的名字、状态（通过或者失败）、耗时、测试用例的日志等。\u003c/p\u003e\n\n\u003cp\u003e不带有\u003ccode\u003e-v\u003c/code\u003eflag的go test命令非常安静，我经常把\u003ccode\u003e-v\u003c/code\u003e开关打开。比如输出如下：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ go test -v context\n=== RUN   TestBackground\n--- PASS: TestBackground (0.00s)\n=== RUN   TestTODO\n--- PASS: TestTODO (0.00s)\n=== RUN   TestWithCancel\n--- PASS: TestWithCancel (0.10s)\n=== RUN   TestParentFinishesChild\n--- PASS: TestParentFinishesChild (0.00s)\n=== RUN   TestChildFinishesFirst\n--- PASS: TestChildFinishesFirst (0.00s)\n=== RUN   TestDeadline\n--- PASS: TestDeadline (0.16s)\n=== RUN   TestTimeout\n--- PASS: TestTimeout (0.16s)\n=== RUN   TestCanceledTimeout\n--- PASS: TestCanceledTimeout (0.10s)\n...\nPASS\nok      context 2.426s\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"go-test-race\"\u003e$go test -race\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://blog.golang.org/race-detector\"\u003eGo竞争检测工具\u003c/a\u003e可以通过\u003ccode\u003e--race\u003c/code\u003e使用。go test也支持这个flag并且报告竞争。在开发阶段使用这个flag可以检测竞争。\u003c/p\u003e\n\n\u003ch2 id=\"go-test-run\"\u003e$go test -run\u003c/h2\u003e\n\n\u003cp\u003e使用\u003ccode\u003e-run\u003c/code\u003eflag，你可以通过正则过滤测试用例。下面的命令会只测试\u003ca href=\"https://blog.golang.org/examples\"\u003etest examples\u003c/a\u003e：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ go test -run=Example\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"go-test-coverprofile\"\u003e$go test -coverprofile\u003c/h2\u003e\n\n\u003cp\u003e你可以输出一个覆盖信息，如果你在测试一个包，然后使用go tool来在浏览器上实现可视化：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ go test -coverprofile=c.out \u0026amp;\u0026amp; go tool cover -html=c.out\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e上面的命令会创建一个覆盖信息，然后在浏览器上打开结果页面。可视化后的结果会类似下面的页面：\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"https://raw.githubusercontent.com/itfanr/articles-about-golang/master/2016-09/2016-09-27-1-1.png\" alt=\"go test -coverprofile\"/\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch2 id=\"go-test-exec\"\u003e$go test -exec\u003c/h2\u003e\n\n\u003cp\u003e这是一个鲜为人知的特性，使用\u003ccode\u003e-exec\u003c/code\u003e这个flag，你可以用另外的程序和tools交互。这个flag允许你使用Go tool把一些工作代理到另外的程序。\u003c/p\u003e\n\n\u003cp\u003e使用这个flag常用的需求场景是：当你需要做更多的事情，而不是仅仅执行宿主机的程序。Go的\u003ca href=\"https://github.com/golang/go/blob/master/misc/android/go_android_exec.go\"\u003eAndroid build\u003c/a\u003e，使用了\u003ccode\u003e-exec\u003c/code\u003e来推送测试二进制文件到Android设备（通过使用\u003ccode\u003eadb\u003c/code\u003e），并收集测试结果。可以作为一个参考。\u003c/p\u003e\n\n\u003ch2 id=\"go-get-u\"\u003e$go get -u\u003c/h2\u003e\n\n\u003cp\u003e如果你执行go-test命令来获取一个已经在GOPATH中的包，那么go-get不好更新包到最新版本，而\u003ccode\u003e-u\u003c/code\u003e会强制tool同步这个仓库的最新的版本。\u003c/p\u003e\n\n\u003cp\u003e如果你是一个library的作者，那么你可能喜欢写你的安装说明通过\u003ccode\u003e-u\u003c/code\u003eflag，比如，\u003ca href=\"https://github.com/golang/lint#installation\"\u003egolin\u003c/a\u003et这样的方式：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ go get -u github.com/golang/lint/golint\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"go-get-d\"\u003e$go get -d\u003c/h2\u003e\n\n\u003cp\u003e如果你只想clone一个repo到GOPATH，跳过编译和安装过程，那么使用\u003ccode\u003e-d\u003c/code\u003e。它会下载包，然后在尝试编译和安装之前停止。\u003c/p\u003e\n\n\u003cp\u003e我经常使用它，作为git clone的替代命令，使用虚假的URLs，因为它会克隆这个repo到它合适的GOPATH。比如：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ go get -d golang.org/x/oauth2/...\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e会克隆包到\u003ccode\u003e$GOPATH/src/golang.org/x/ouath2\u003c/code\u003e。给出的\u003ccode\u003egolang.org/x/oauth2\u003c/code\u003e是一个虚假的URL，go-get这个仓库是很有用的，而不是尝试知道知己的repo是什么（go.googlesource.com/oauth2）。\u003c/p\u003e\n\n\u003ch2 id=\"go-get-t\"\u003e$go get -t\u003c/h2\u003e\n\n\u003cp\u003e如果你的包需要额外的包来测试，\u003ccode\u003e-t\u003c/code\u003e会允许你在go-get过程中下载它们。如果你不传入\u003ccode\u003e-t\u003c/code\u003e参数，go get会只下载非测试代码的依赖。\u003c/p\u003e\n\n\u003ch2 id=\"go-list-f\"\u003e$ go list -f\u003c/h2\u003e\n\n\u003cp\u003e允许你下载Go包以一种自定义的格式。对写bash脚本非常有用。下面的命令会输出runtime包的依赖：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ go list -f '{{.Deps}}' runtime\n[runtime/internal/atomic runtime/internal/sys unsafe]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ca href=\"https://rakyll.org/go-tool-flags/\"\u003e英文原文\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e写在后面：虽然我们开发过程中不想被语言层面的东西限制太多，但是一些偶尔熟悉下这些命令的确可以使我们少走一些弯路。\u003c/p\u003e\n\u003c/blockquote\u003e\n","location":"开发/go/关于Go tools的比较有用的flags","tags":["go","代码调优"],"title":"【译】关于Go tools的比较有用的flags\n"}