{"date":"2022-06-01T00:00:00Z","html":"\u003cp\u003e国内SaaS产业长期落后，近几年由于移动办公的兴起和人口红利的增长放缓，这个传统产业又重新回到了国内资本的视野，aPaaS，iPaaS，iDaaS、低码，无码等技术概念也在这期间被多次谈起。这篇文章，我则试图从后台架构的角度来聊一聊这些技术，这些架构往往具备通用性，无论你是在做B端产品还是C端产品，相信都能从这些基本的SaaS模型中找到有用的东西。\u003c/p\u003e\n\n\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\n\u003cp\u003e我们首先从低码和后台架构来展开讨论：\u003c/p\u003e\n\n\u003ch3 id=\"1-什么是低码\"\u003e1. 什么是低码？\u003c/h3\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e低码特指一种\u003ccode\u003e通用开发工具\u003c/code\u003e，它面向的主要是有一定开发经验的开发人员，辅助其做出一定的业务功能。它和无码的本质区别是，具备多行业通用性。业内成熟的低码开发平台有：OutSystems,Mendix, Microsoft PowerApps等，业内的成熟的无码平台有：Airtable，简道云等，可以从其文档粗略看出无码往往面向业务人员，不需要很强的领域知识。而低码的文档依然有数据湖，连接器, 工作流等很强的技术术语，两者有一定的交叉，但是也可以明显看出，无码相比低码往往更加专注于特定领域，比如：Webflow，Notion，Airtable 都有各自专注的功能，而低码是更加通用的开发工具，通用性和领域深度往往很难两全。\u003c/p\u003e\n\n\u003cp\u003eGartner对低码能力的6个评价标准为：\u003ccode\u003e模型驱动\u003c/code\u003e、\u003ccode\u003e软件工程\u003c/code\u003e、\u003ccode\u003e开放集成\u003c/code\u003e、\u003ccode\u003e可视化开发\u003c/code\u003e、\u003ccode\u003e表达式语言\u003c/code\u003e、\u003ccode\u003e脚本语言\u003c/code\u003e。以此也可以看出，低码更加接近于大家早期提到的 \u003ccode\u003eaPaaS\u003c/code\u003e（应用开发平台即服务）的概念。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"2-现代架构的灵魂-领域驱动设计\"\u003e2. 现代架构的灵魂：领域驱动设计\u003c/h3\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e领域驱动设计（domain-driven design）是一种针对大型复杂业务系统的领域建模方法体系。通过面向领域的思维方式，将要解决的业务概念和业务规则等内容提炼为领域知识，然后借由不同的建模范式将这些领域知识抽象为能够反映真实世界的领域模型。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"3-低码和领域驱动\"\u003e3. 低码和领域驱动\u003c/h3\u003e\n\n\u003cp\u003e从1和2的概念可以看出，低码尝试做出一种通用开发工具，而领域驱动则尝试将常用的建模范式抽象为领域模型，因此，结合业内成熟的领域模型到低码开发平台，就成了头部厂商发展的必然选择，只有使用这些领域模型，才能复用SaaS行业发展20多年的行业积累。\u003c/p\u003e\n\n\u003cp\u003e从目前头部的几个低码平台的架构开发文档可以看出，低码平台具备下面特点：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e对现有\u003ccode\u003e应用开发模式的标准化和高度抽象\u003c/code\u003e;\u003c/li\u003e\n\u003cli\u003e构建开放的能力链接平台，确保产业互联;\u003c/li\u003e\n\u003cli\u003e整合平台其他服务资源，实现场景创新。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"架构剖析-低码中的那些通用的领域模型\"\u003e架构剖析：低码中的那些通用的领域模型？\u003c/h2\u003e\n\n\u003cp\u003e前面提到，低码的本质是构建一种通用的开发工具，我们以最常见低码的菜单为例，可以看到应用，数据源，工作流，组件库和模板，但是，概括其底层架构本质，可以概括为用户身份，数据，工作流，其他系统集成这四个方面。\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/apaas/image/低码(aPaaS)，高度抽象的现代应用架构/arch.png\" alt=\"image-20220905114645731\"/\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e因此，我这边首先将低码的底层架构划分为4个最主要的领域模型：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eiDaaS（身份即服务）：应用的入口，链接人和业务\u003c/li\u003e\n\u003cli\u003eDaaS（数据即服务）：数据驱动创新\u003c/li\u003e\n\u003cli\u003e工作流：智能自动化的本源\u003c/li\u003e\n\u003cli\u003eiPaaS（集成平台即服务）：开放集成造就创新\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e我们先以脑图的形式展开这四个领域模型以及各自所负责的业务，在接下来的文章中，我们将以该脑图为纲，逐步向大家分析下，这四个领域模型的一些细节。\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/apaas/image/低码(aPaaS)，高度抽象的现代应用架构/xmind.png\" alt=\"img\"/\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch3 id=\"通用架构1-一切应用的入口-idaas\"\u003e通用架构1：一切应用的入口，iDaaS\u003c/h3\u003e\n\n\u003cp\u003e暂时放开低码不谈，你现在做任何应用，都无法缺少用户和安全这一层，iDaaS技术就是专门解决此类的问题的成熟模型，iDaaS的中文翻译是身份即服务，业内头部公司，\u003ccode\u003e无论是B端产品还是C端产品都是按照标准的iDaaS模型来做的\u003c/code\u003e。以我们最常见的应用 Google 为例，Google 的Youtube，Maps，Search 等C端产品都支持比较完善的iDaaS标准协议，OIDC就是其最通用的一种协议，而作为低码的头部厂商Mendix，Salesforce 也都支持完整的OIDC协议，因此，无论你是否需要做iDaaS产品，只要你需要构建\u003ccode\u003e开放平台\u003c/code\u003e，都需要在产品中集成iDaaS开发模型。\u003c/p\u003e\n\n\u003cp\u003e总结下来iDaaS主要负责两方面的能力：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e用户身份\u003c/li\u003e\n\u003cli\u003e链接客户端身份\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e用户身份比较容易理解，但是链接客户端身份在国内的这种松散管理的开发模式下却比较隐藏，链接客户端在国内通常是以开放平台的模式出现的，比如微信开放平台，新浪开放平台等。在成熟完整的应用中，每个应用都具备自己的端ID，比如：Google 的 Youtube，Map，Search等都有各自的客户端身份，各端的交互通过iDaaS的开放链接能力关联。\u003c/p\u003e\n\n\u003cp\u003e下图是我这边做过的一个iDaaS能力矩阵描述：\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/apaas/image/低码(aPaaS)，高度抽象的现代应用架构/image-20220905105638455.png\" alt=\"image-20220905105638455\"/\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e从上图可以看出，一个完整的应用主要围绕身份和应用端管理展开，这种模式在海外的是非常常见的，无论大家常见的C端应用还是B端应用，都是按照这一个模式进行的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"通用架构2-数据驱动创新\"\u003e通用架构2：数据驱动创新\u003c/h3\u003e\n\n\u003cp\u003e在我们开发一个应用的时候，最常见的形式就是FORM(表单)，但是表单仅仅是数据的一种来源，如果缺乏完整的数据模型，很容导致产品进入一个无法迭代的状态，比如，我之前接触过的一些团队，将数据存储和分析全部用mysql 来做，这样导致在多租户共享数据库的模式下，一个租户的简单的聚合查询，导致另外一个租户常规的业务服务不可用。下图，我们将数据服务拆分外收集，存储，分析三个阶段，并通过具体实例来解释这三个阶段的主要职责。\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/apaas/image/低码(aPaaS)，高度抽象的现代应用架构/1-20220905105815829.png\" alt=\"img\"/\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e在收集阶段是我们最常见类型是模型应用，通过模型驱动来创建数据的scheme，并通过UI界面来实现数据的收集，在数据收集完成后，我们需要将数据存储到数据库中，这一步也是大家最容易出错的地方，数据在我们的常见的模型中，包含\u003ccode\u003e数据库(Database)\u003c/code\u003e和\u003ccode\u003e数据湖(DataLake)\u003c/code\u003e两个部分，数据库和数据湖有各自的处理范围，如果一个业务选错了其场景，则可能导致业务发展受阻，稳定性无法保障。 在数据分析阶段，往往我们需要通过数据湖技术来构建整个分析流程，这部分功能我们可以做的很深，也可以只满足特性的需求，但是整体模型的拆分是不可避免的。在低码场景下，数据库模型常见的技术为：MongoDB，大宽表，独享MySQL等，而数据库湖往往使用一些大数据技术，并通过CloudEvents 和数据库进行集成。\u003c/p\u003e\n\n\u003ch3 id=\"通用架构3-工作流\"\u003e通用架构3：工作流\u003c/h3\u003e\n\n\u003cp\u003e工作流（Workflow），在现代化应用中还是比较常见的，无论是异步任务还是流程审批，都离不开这部分技术。工作流模块在aPaaS的抽象中通常被分为两类：\u003ccode\u003e审批\u003c/code\u003e和\u003ccode\u003e异步任务\u003c/code\u003e，审批是大家可以显式在产品文档中看到的，但是\u003ccode\u003e异步任务\u003c/code\u003e却可能隐藏在技术细节的各个角落，异步任务在数据同步，应用集成中起了关键的作用。下面就两类工作流的特心特征和统一模型做下解释。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e审批工作流\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e审批工作流主要具备以下特征：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e参与者主要以人为主\u003c/li\u003e\n\u003cli\u003e通常包含表单数据\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e标准\u003c/code\u003e：BPMN\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e代表\u003c/code\u003e：Flowable\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e异步任务工作流\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cul\u003e\n\u003cli\u003e参与者主要以机器为主\u003c/li\u003e\n\u003cli\u003e支持非常复杂的异步任务计算\u003c/li\u003e\n\u003cli\u003e支持分布式事务\u003c/li\u003e\n\u003cli\u003e支持定时任务等\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e代表\u003c/code\u003e：Aws Simple Workflow (pipeline)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e如果暂时抛开低码场景，在传统的后端服务中，异步任务工作流是处理复杂后端业务的一种必备能力，在分布式场景下，事务，资源调度，资源清理等都是用该技术进行处理。这两类工作流虽然都有其各自业务范畴，但是总体模型是一致的，下图是工作流的一种模型抽象：\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/apaas/image/低码(aPaaS)，高度抽象的现代应用架构/1-20220905110206498.png\" alt=\"img\"/\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e结合具体实践，可以将其归类为4个主要模块：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e流程定义工具\u003c/li\u003e\n\u003cli\u003e活动执行引擎\u003c/li\u003e\n\u003cli\u003e客户端集成/触发\u003c/li\u003e\n\u003cli\u003e活动监控和管理\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"通用架构4-开放集成\"\u003e通用架构4：开放集成\u003c/h3\u003e\n\n\u003cp\u003e开放集成，业内也通常将其称之为iPaaS(集成平台即服务)，但是，无论是B端产品还是C端产品，拥有完整的集成能力，都会给我们的技术迭代带来很多便利，我这边搜集整理了目前iPaaS的架构模型图，如下：\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/apaas/image/低码(aPaaS)，高度抽象的现代应用架构/1-20220905110521806.png\" alt=\"img\"/\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e该图，完整贯穿了应用到数据分析的过程，总结下来，开放集成能力主要涉及以下的技术：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e安全认证层以iDaaS为中心;\u003c/li\u003e\n\u003cli\u003e平台数据分析层以数据库和数据湖为中心;\u003c/li\u003e\n\u003cli\u003e业务规则处理以工作流为中心。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e可以看出，集成能力是对低码前三个能力的抽象和开放，里边主要依赖iDaaS，工作流，数据服务的能力，他的本质是对前三个能力的整合和产品化输出。\u003c/p\u003e\n\n\u003ch3 id=\"架构总结\"\u003e架构总结\u003c/h3\u003e\n\n\u003cp\u003e头部的低码厂商，很大一部分是SaaS演变而来的，而SaaS是经过了20多年的行业积累，这期间沉淀了大部分的行业标准和业务处理模型，在总结国内SaaS环境中，在大量的互联网厂商高调入局SaaS的过程中，造成了一定的技术断层。\u003ccode\u003e国内SaaS市场的状况是，在互联网背景下成长出的新一代技术人才不具备行业背景能力，而具备行业背景能力的人又老了或者不懂新技术\u003c/code\u003e，这篇文章借着底层架构能力，试图总结下SaaS迭代到aPaaS过程中一些不变的底层能力，让大家更加重视架构模型在产品中的作用。\u003c/p\u003e\n\n\u003cp\u003e因为aPaaS本质是对现代应用开发的高度抽象，因此下图的这些模块划分在我们做C端产品的时候也是必不可少的，比如：iDaaS的本质就是用户中心，DaaS就是数据中台，工作流就是后端的分布式事务，异步编程模块，iPaaS 就是我们常见的开放平台。 但是，在做C端产品时，国外有长期的行业标准积累，各头部厂商在标准方面合作紧密，国内普遍从0开始思考。\u003c/p\u003e\n\n\u003cp\u003e\u003cdiv class=\"image-package\"\u003e\u003cimg src=\"/开发/apaas/image/低码(aPaaS)，高度抽象的现代应用架构/1-20220905110805442.png\" alt=\"img\"/\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch2 id=\"后记\"\u003e后记\u003c/h2\u003e\n\n\u003cp\u003e让我们重新思考下Gartner对低码能力的6个评价标准为：\u003ccode\u003e模型驱动\u003c/code\u003e、\u003ccode\u003e软件工程\u003c/code\u003e、\u003ccode\u003e开放集成\u003c/code\u003e、\u003ccode\u003e可视化开发\u003c/code\u003e、\u003ccode\u003e表达式语言\u003c/code\u003e、\u003ccode\u003e脚本语言\u003c/code\u003e， 其中前三个都是与开发息息相关的，按照该标准低码绝对不仅仅是只能搭建简单表单的工具，它更像是一种新的开发模式，其对软件工程的要求是非常高的。构建成熟的开发者生态，除了将现有的一些功能简化，更需要给当前开发模式增加更加丰富的开发体验，带来一些传统开发模式无法提供的便利性。\u003c/p\u003e\n","location":"开发/apaas/低码(aPaaS)，高度抽象的现代应用架构","picture":"/开发/apaas/image/低码(aPaaS)，高度抽象的现代应用架构/apaas.png","tags":["aPaaS","低码","Serverless"],"title":"低码(aPaaS)，高度抽象的现代应用架构"}