{"catalog":"projects","date":"2016-09-04T00:00:00Z","github":"https://github.com/ti/ctxrouter","html":"\u003cp\u003eGitHub: \u003ca href=\"https://github.com/ti/ctxrouter\"\u003ehttps://github.com/ti/ctxrouter\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"features\"\u003eFeatures\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eContext Append on Current Function\u003c/li\u003e\n\u003cli\u003eBest Performance (no regexp match)\u003c/li\u003e\n\u003cli\u003eWildcards Router Support (PathPrefix)\u003c/li\u003e\n\u003cli\u003eDecode request body before business layer (JSON, xml or other)\u003c/li\u003e\n\u003cli\u003eDecode request url before business layer\u003c/li\u003e\n\u003cli\u003eZero Garbage\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"examples\"\u003eExamples\u003c/h1\u003e\n\n\u003ch2 id=\"basic-example\"\u003eBasic Example\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003epackage main\n\nimport (\n\t\u0026quot;github.com/ti/ctxrouter\u0026quot;\n\t\u0026quot;net/http\u0026quot;\n\t\u0026quot;strconv\u0026quot;\n)\n\n//context style\nfunc (ctx *Context) Hello(id string) {\n\t//ctx.Request ...\n\tctx.Writer.Write([]byte(\u0026quot;hello \u0026quot; + id))\n}\n//normal style\nfunc NormalHello(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\u0026quot;hello \u0026quot; + ctxrouter.Params(r)[0]))\n}\n//func style\nfunc Hello(ctx *ctxrouter.Context, name string,  id int) {\n\tctx.Text(\u0026quot;hello \u0026quot; + name + \u0026quot;, id is \u0026quot; + strconv.Itoa(id))\n}\n\nfunc main() {\n\tr := ctxrouter.New()\n\tr.Get(\u0026quot;/basic/:name\u0026quot;, (*Context).Hello)\n\tr.Get(\u0026quot;/normal/:name\u0026quot;, NormalHello)\n\tr.Get(\u0026quot;/func/:name/:id\u0026quot;,Hello)\n\tr.Get(\u0026quot;/\u0026quot;, (*Context).Index)\n\t//auto decode url with string or int\n\tr.Get(\u0026quot;/basic/:name/json/:age\u0026quot;, (*Context).Json)\n\t//match path prefixes /all/*:\n\tr.All(\u0026quot;/basic/*path\u0026quot;,(*Context).All)\n\t//a simple func without implement ctxrouter.Context\n\thttp.ListenAndServe(\u0026quot;:8081\u0026quot;, r)\n}\n\ntype Context struct {\n\tctxrouter.Context\n}\n\nfunc (c *Context) Index() {\n\tc.Text(\u0026quot;index\u0026quot;)\n}\n\nfunc (c *Context) All(path string) {\n\tc.Text(\u0026quot;all router goes here \u0026quot; +  path)\n}\n\nfunc (c *Context) Json(name string, age int) {\n\ttype Person struct {\n\t\tName string\n\t\tAge   int\n\t}\n\tc.JSON(Person{Name:name,Age:age})\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"with-powerful-context\"\u003eWith Powerful Context\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003e//do something  Workflow with ctx router\npackage main\n\nimport (\n\t\u0026quot;net/http\u0026quot;\n\t\u0026quot;github.com/ti/ctxrouter\u0026quot;\n)\n\ntype Context struct {\n\tctxrouter.Context\n\tData  map[string]string\n}\n\nfunc (c *Context) Start() {\n\tc.Data = make(map[string]string)\n\tc.Data[\u0026quot;context\u0026quot;] = \u0026quot;0\u0026quot;\n\tc.Step()\n}\n\nfunc (c *Context) Step() {\n\tc.Data[\u0026quot;context1\u0026quot;] = \u0026quot;1\u0026quot;\n\tc.End()\n}\n\nfunc (c *Context) End() {\n\tc.Data[\u0026quot;context2\u0026quot;] = \u0026quot;2\u0026quot;\n\tc.JSON(c.Data)\n}\n\nfunc main() {\n\tr := ctxrouter.New()\n\tr.Get(\u0026quot;/context/\u0026quot;,(*Context).Start)\n\thttp.ListenAndServe(\u0026quot;:8081\u0026quot;, r)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"decode-request-before-business-layer\"\u003eDecode Request Before Business Layer\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003epackage main\n\nimport (\n\t\u0026quot;net/http\u0026quot;\n\t\u0026quot;github.com/ti/ctxrouter\u0026quot;\n)\n\n//decode request sample\ntype User struct {\n\tId      int             `json:\u0026quot;int\u0026quot;`\n\tName    string          `json:\u0026quot;name\u0026quot;`\n}\n\ntype UserContext struct {\n\tctxrouter.Context\n\tData  *User\n}\n\n//Auto Decode Json or other request\nfunc (ctx *UserContext) DecodeRequest() error {\n\tctx.Data = new(User)\n\tctx.Context.Data = ctx.Data\n\treturn ctx.Context.DecodeRequest()\n}\n\nfunc (ctx *UserContext) SayHello() {\n\tctx.Text(\u0026quot;Hello \u0026quot;+ ctx.Data.Name)\n}\n\nfunc main() {\n\tr := ctxrouter.New()\n\tr.Post(\u0026quot;/users/hello\u0026quot;,(*UserContext).SayHello)\n\thttp.ListenAndServe(\u0026quot;:8081\u0026quot;, r)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003ecurl -i -X POST \\\n   -H \u0026quot;Content-Type:application/json\u0026quot; \\\n   -d \\\n'{\u0026quot;name\u0026quot;:\u0026quot;leenanxi\u0026quot;}' \\\n 'http://localhost:8081/users/hello'\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"normal-http-handler\"\u003eNormal HTTP Handler\u003c/h2\u003e\n\n\u003cp\u003eAlert: This is Not recommended if you start a new project.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003epackage main\n\nimport (\n\t\u0026quot;github.com/ti/ctxrouter\u0026quot;\n\t\u0026quot;net/http\u0026quot;\n)\n\nfunc NormalHelloHandler(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\u0026quot;HELLO\u0026quot;))\n}\n\nfunc NormalHandler(w http.ResponseWriter, r *http.Request) {\n\tparams := ctxrouter.Params(r)\n\tw.Write([]byte(\u0026quot;Name:\u0026quot; + params[0] + \u0026quot;\\nAge:\u0026quot; + params[1] ))\n}\n\nfunc main() {\n\tr := ctxrouter.New()\n\tr.Get(\u0026quot;/normal/hello\u0026quot;,NormalHelloHandler)\n\tr.Get(\u0026quot;/normal/v1/:name/:age\u0026quot;,NormalHandler)\n\t//support any http.Handler interface\n\tr.Get(\u0026quot;/404\u0026quot;,http.NotFoundHandler())\n\thttp.ListenAndServe(\u0026quot;:8081\u0026quot;, r)\n}\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"how-middleware-x\"\u003eHow Middleware X?\u003c/h2\u003e\n\n\u003cp\u003eThe router is \u003ccode\u003ehttp.Handler\u003c/code\u003e,  so you can chain any http.Handler compatible middleware before the router, for  example \u003ca href=\"http://www.gorillatoolkit.org/pkg/handlers\"\u003ehttp://www.gorillatoolkit.org/pkg/handlers\u003c/a\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003epackage main\n\nimport (\n\t\u0026quot;github.com/ti/ctxrouter\u0026quot;\n\t\u0026quot;github.com/gorilla/handlers\u0026quot;\n\t\u0026quot;os\u0026quot;\n\t\u0026quot;net/http\u0026quot;\n)\n\n//context style\nfunc (ctx *Context) Hello(name string) {\n\tctx.Text(\u0026quot;hello \u0026quot; + name)\n}\n\nfunc main() {\n\tr := ctxrouter.New()\n\tr.Get(\u0026quot;/hello/:name\u0026quot;, (*Context).Hello)\n\thttp.ListenAndServe(\u0026quot;:8081\u0026quot;, (handlers.LoggingHandler(os.Stdout, r)))\n}\n\ntype Context struct {\n\tctxrouter.Context\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"static-files\"\u003eStatic Files\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003epackage main\n\nimport (\n\t\u0026quot;github.com/ti/ctxrouter\u0026quot;\n\t\u0026quot;net/http\u0026quot;\n)\n\nfunc main() {\n\tvar dir = \u0026quot;/your/static/dir/path\u0026quot;\n\tr := ctxrouter.New()\n\tr.All(\u0026quot;/static/*path\u0026quot;,http.StripPrefix(\u0026quot;/static/\u0026quot;, http.FileServer(http.Dir(dir))))\n\thttp.ListenAndServe(\u0026quot;:8081\u0026quot;, r)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"restful-api\"\u003eRestful Api\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003epackage main\n\nimport (\n\t\u0026quot;net/http\u0026quot;\n\t\u0026quot;github.com/ti/ctxrouter\u0026quot;\n)\nfunc main() {\n\tr := ctxrouter.New()\n\tr.Get(\u0026quot;/apps\u0026quot;, (*AppContext).GetApps)\n\tr.Get(\u0026quot;/apps/:id\u0026quot;, (*AppContext).GetApp)\n\tr.Post(\u0026quot;/apps\u0026quot;, (*AppContext).PostApps)\n\tr.Patch(\u0026quot;/apps/:id\u0026quot;, (*AppContext).PatchApp)\n\tr.Put(\u0026quot;/apps/:id\u0026quot;, (*AppContext).PutApp)\n\tr.Delete(\u0026quot;/apps/:id\u0026quot;, (*AppContext).DeleteApp)\n\thttp.ListenAndServe(\u0026quot;:8081\u0026quot;, r)\n}\ntype AppContext struct {\n\tctxrouter.Context\n}\nfunc (ctx *AppContext) GetApps() {\n\tctx.Text(\u0026quot;get apps\u0026quot;)\n}\nfunc (ctx *AppContext) GetApp(id string) {\n\tctx.Text(\u0026quot;get app \u0026quot; + id)\n}\nfunc (ctx *AppContext) PostApps() {\n\tctx.Text(\u0026quot;post apps\u0026quot;)\n}\nfunc (ctx *AppContext) DeleteApp(id string) {\n\tctx.Text(\u0026quot;delete app \u0026quot; + id)\n}\nfunc (ctx *AppContext) PutApp(id string) {\n\tctx.Text(\u0026quot;put app \u0026quot; + id)\n}\nfunc (ctx *AppContext) PatchApp(id string) {\n\tctx.Text(\u0026quot;patch app \u0026quot; + id)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"full-example\"\u003eFull Example\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003e//full example with all features in one file, you can read sections above\npackage main\n\nimport (\n\t\u0026quot;net/http\u0026quot;\n\t\u0026quot;fmt\u0026quot;\n\t\u0026quot;github.com/ti/ctxrouter\u0026quot;\n)\n\nfunc main() {\n\tr := ctxrouter.New()\n\tr.Get(\u0026quot;/\u0026quot;, (*Controller).Index)\n\tr.Get(\u0026quot;/basic/:name\u0026quot;, (*Controller).Hello)\n\t//match path prefixes /all/*:\n\tr.All(\u0026quot;/basic/*path\u0026quot;,(*Controller).All)\n\t//auto decode url with string or int\n\tr.Get(\u0026quot;/basic/:name/json/:age\u0026quot;, (*Controller).Json)\n\t//a simple func without implement ctxrouter.Context\n\tr.Get(\u0026quot;/basic/:name/simple\u0026quot;,Simple)\n\n\tr.Post(\u0026quot;/users/hello\u0026quot;,(*UserContext).PrintHello)\n\n\t//do something  Workflow with ctx router\n\tr.Get(\u0026quot;/context/\u0026quot;,(*Context).Start)\n\n\n\tr.Get(\u0026quot;/normal/hello\u0026quot;,NormalHelloHandler)\n\tr.Get(\u0026quot;/normal/v1/:name/:age\u0026quot;,NormalHandler)\n\t//support any http.Handler interface\n\tr.Get(\u0026quot;/404\u0026quot;,http.NotFoundHandler())\n\n\t//static files\n\tvar dir = \u0026quot;/your/static/dir/path\u0026quot;\n\tr.All(\u0026quot;/static/*path\u0026quot;,http.StripPrefix(\u0026quot;/static/\u0026quot;, http.FileServer(http.Dir(dir))))\n\thttp.ListenAndServe(\u0026quot;:8081\u0026quot;, r)\n}\n\ntype Controller struct {\n\tctxrouter.Context\n}\n\nfunc (c *Controller) Index() {\n\tc.Text(\u0026quot;index\u0026quot;)\n}\n\nfunc (c *Controller) Hello(name string) {\n\tfmt.Fprintln(c.Writer, \u0026quot;hello \u0026quot;+name)\n}\n\nfunc (c *Controller) All(path string) {\n\tc.Text(\u0026quot;all router goes here \u0026quot; +  path)\n}\n//input json and output json\nfunc (c *Controller) Json(name string, age int) {\n\ttype Person struct {\n\t\tName string\n\t\tAge   int\n\t}\n\tc.JSON(Person{Name:name,Age:age})\n}\n\nfunc Simple(ctx *ctxrouter.Context, name string) {\n\tctx.Text(\u0026quot;simple \u0026quot; + name)\n}\n\n//decode request sample\ntype User struct {\n\tId      int             `json:\u0026quot;int\u0026quot;`\n\tName    string          `json:\u0026quot;name\u0026quot;`\n}\n\ntype UserContext struct {\n\tctxrouter.Context\n\tData  *User\n}\n\n//Auto Decode Json or other request\nfunc (ctx *UserContext) DecodeRequest() error{\n\tctx.Data = new(User)\n\tctx.Context.Data = ctx.Data\n\treturn ctx.Context.DecodeRequest()\n}\n\nfunc (ctx *UserContext) PrintHello() {\n\tctx.Text(\u0026quot;Hello \u0026quot;+ ctx.Data.Name)\n}\n\ntype Context struct {\n\tctxrouter.Context\n\tData  map[string]string\n}\n\nfunc (c *Context) Start() {\n\tc.Data = make(map[string]string)\n\tc.Data[\u0026quot;context\u0026quot;] = \u0026quot;0\u0026quot;\n\tc.Step()\n}\n\nfunc (c *Context) Step() {\n\tc.Data[\u0026quot;context1\u0026quot;] = \u0026quot;1\u0026quot;\n\tc.End()\n}\n\nfunc (c *Context) End() {\n\tc.Data[\u0026quot;context2\u0026quot;] = \u0026quot;2\u0026quot;\n\tc.JSON(c.Data)\n}\n\nfunc NormalHelloHandler(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\u0026quot;HELLO\u0026quot;))\n}\n\nfunc NormalHandler(w http.ResponseWriter, r *http.Request) {\n\t//get router Params from \u0026quot;X-Ctxrouter-Params\u0026quot; without any extra function\n\tparams := ctxrouter.Params(r)\n\tw.Write([]byte(\u0026quot;Name:\u0026quot; + params[0] + \u0026quot;\\nAge:\u0026quot; + params[1] ))\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch1 id=\"thanks\"\u003eThanks\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003etree.go \u0026amp; tree_test.go is edited from httprouter \u003ca href=\"https://github.com/julienschmidt/httprouter\"\u003ehttps://github.com/julienschmidt/httprouter\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","link":"https://github.com/ti/ctxrouter","location":"项目/context_router","tags":["golang","router"],"title":"CtxRouter A High performance HTTP request router with Context\n"}