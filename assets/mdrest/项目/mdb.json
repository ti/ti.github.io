{"catalog":"projects","date":"2017-05-05T00:00:00Z","github":"https://github.com/ti/mdb","html":"\u003cp\u003eGolang 一直缺失官方的Mongodb库， 对于Go开发者，普遍采用mgo库作为go语言的mongodb驱动库，如果你使用过，你可能在每次查询数据库时习惯了以下的用法：\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003ecopy := session.Clone; \ndefter copy.Close();\ncopy.DB(\u0026quot;dbname).C(\u0026quot;col\u0026quot;).Find(...)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这样的用法虽然丑陋，但是它解决了我们使用mongodb最大的坑，“当MongoDB断开后，mongodb无法重连\u0026rdquo; 的问题， 但是这样的用法也会造成一些问题：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e每次查询mongodb库，都会克隆一个新的session，并刷新，造成资源浪费。\u003c/li\u003e\n\u003cli\u003e当你的程序在高并发时，你会发现你的mongodb链接达到了 上百和上千个。\u003c/li\u003e\n\u003cli\u003e高并发时，大概会有30%的请求率，会返回 \u0026ldquo;Closed explicitly\u0026rdquo; 或者 \u0026ldquo;EOF\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e为了解决这个问题，我重新封装了mgo库，叫做mdb，自带重连机制，使用方法也和普通的SQL库有几分相似\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003e//初始化db对象，db_for_connect 一般为admin， db 为默认数据库名\ndb, err := mdb.Dial(\u0026quot;mongodb://username:password@127.0.0.1:27017/db_for_connect?db=test\u0026quot;)\n//向db的people 表添加数据\ndb.C(\u0026quot;people\u0026quot;).Insert(\u0026amp;Person{\u0026quot;Ale\u0026quot;, \u0026quot;+55 53 8116 9639\u0026quot;})\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这样操作会有以下优点：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e简化monogdb操作的代码量。在业务层，你只需\u003ccode\u003edb.C(\u0026quot;people\u0026quot;).Insert(...)\u003c/code\u003e，来进行数据操作。\u003c/li\u003e\n\u003cli\u003e减少长连数量，并提高稳定性。一般情况下，你和mongodb只有一个长连，随着业务量的增加可能会增加2个，3个或更多，这些长连会自我维护和释放。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003egithub地址: \u003ca href=\"https://github.com/ti/mdb\"\u003ehttps://github.com/ti/mdb\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e详情如下：\u003c/p\u003e\n\n\u003ch1 id=\"mdb\"\u003emdb\u003c/h1\u003e\n\n\u003cp\u003eA rich mongodb driver based on mgo and auto refresh when \u0026ldquo;Closed explicitly\u0026rdquo; or \u0026ldquo;EOF\u0026rdquo;\u003c/p\u003e\n\n\u003ch1 id=\"feature\"\u003efeature\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003edo not need \u003ccode\u003ecopy := session.Clone; defter copy.Close();\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003euse db instance in project\u003c/li\u003e\n\u003cli\u003eless tcp connections\u003c/li\u003e\n\u003cli\u003eauto refresh connections when connection is break\u003c/li\u003e\n\u003cli\u003emore simple\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"why-this-one\"\u003ewhy this one\u003c/h1\u003e\n\n\u003cp\u003eif you use  \u003ccode\u003ecopy := session.Clone; defter copy.Close(); copy.DB(\u0026quot;dbname).C(\u0026quot;col\u0026quot;).Find(...)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eyou may got \u0026ldquo;Closed explicitly\u0026rdquo; or \u0026ldquo;EOF\u0026rdquo;  when in high concurrency\u003c/p\u003e\n\n\u003ch1 id=\"quick-start\"\u003equick start\u003c/h1\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003etype Person struct {\n\tName string\n\tPhone string\n}\n\nfunc main() {\n    //the test is default db\n\tdb, err := mdb.Dial(\u0026quot;mongodb://127.0.0.1:27017/test\u0026quot;)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n  \n\tc := db.C(\u0026quot;people\u0026quot;)\n\terr = c.Insert(\u0026amp;Person{\u0026quot;Ale\u0026quot;, \u0026quot;+55 53 8116 9639\u0026quot;},\u0026amp;Person{\u0026quot;Cla\u0026quot;, \u0026quot;+55 53 8402 8510\u0026quot;})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t\n\tresult := Person{}\n\terr = c.Find(bson.M{\u0026quot;name\u0026quot;: \u0026quot;Ale\u0026quot;}).One(\u0026amp;result)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\u0026quot;Phone:\u0026quot;, result.Phone)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch1 id=\"when-mongo-connection-string-and-database-name-is-different\"\u003ewhen mongo connection string and database name is different?\u003c/h1\u003e\n\n\u003cp\u003euse \u003ca href=\"https://docs.mongodb.com/manual/reference/connection-string/\"\u003emongo-connection-string\u003c/a\u003e + \u003ccode\u003e\u0026amp;db={db_name}\u003c/code\u003e use  to config your db name\u003c/p\u003e\n\n\u003cp\u003eexample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003edb, err := mdb.Dial(\u0026quot;mongodb://username:password@192.168.31.5:27017?db=test\u0026quot;)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ewhen username is not an administrator\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003edb, err := mdb.Dial(\u0026quot;mongodb://username:password@127.0.0.1:27017/test\u0026quot;)\n//when you have to connect another db first\ndb, err := mdb.Dial(\u0026quot;mongodb://username:password@127.0.0.1:27017/db_for_connect?db=test\u0026quot;)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch1 id=\"new-connection-string-parameter\"\u003enew connection string parameter\u003c/h1\u003e\n\n\u003cp\u003emaxRetries  : max retries time  when network is error, default is 2\u003c/p\u003e\n\n\u003cp\u003edb          : database name when your connection string and database name is different\u003c/p\u003e\n\n\u003cp\u003eFULL Example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003edb, err := mdb.Dial(\u0026quot;mongodb://username:password@127.0.0.1:27017?db=test\u0026amp;maxRetries=2\u0026quot;)\n\n\u003c/code\u003e\u003c/pre\u003e\n","link":"https://github.com/ti/mdb","location":"项目/mdb","picture":"/项目/img/mongodb.jpg","tags":["mongodb","mgo","go"],"title":"mdb,一个以db为单位，带重连机制的mgo封装"}