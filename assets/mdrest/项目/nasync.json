{"catalog":"projects","date":"2016-02-04T00:00:00Z","github":"https://github.com/ti/nasync","html":"\u003cp\u003ea customizable async task pool for golang, (event bus, runtime)\u003c/p\u003e\n\n\u003cp\u003egithub: \u003ca href=\"https://github.com/ti/nasync\"\u003ehttps://github.com/ti/nasync\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"fetures\"\u003eFetures\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eless memory\u003c/li\u003e\n\u003cli\u003emore effective\u003c/li\u003e\n\u003cli\u003emax gorutines and memory customizable\u003c/li\u003e\n\u003cli\u003emore safe\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"simple-usage\"\u003eSimple Usage\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003enasync.Do(function)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"advanced-usage\"\u003eAdvanced Usage\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003ego get github.com/ti/nasync\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003eimport \u0026quot;github.com/ti/nasync\u0026quot;\n\nfunc main() {\n        //new a async pool in max 1000 task in max 1000 gorutines\n        async := nasync.New(1000,1000)\n        defer async.Close()\n        async.Do(doSometing,\u0026quot;hello word\u0026quot;)\n        nasync.Do(func() {\n\t\t\thttp.Get(\u0026quot;https://github.com/ti/\u0026quot;)\n\t\t})\n}\n\n\nfunc doSometing(msg string) string{\n\treturn \u0026quot;i am done by \u0026quot; + msg\n}\n\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch1 id=\"why\"\u003eWHY\u003c/h1\u003e\n\n\u003cp\u003egolang is something easy but fallible language, you may do this\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003e   func yourfucntion() {\n            go dosomething()  // this will got error on high load\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eyou may get \u0026ldquo;too many open files\u0026rdquo; error, when your application  in High load, so you need this, you can do any thing in async by this, it is trusty。your can use this for:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ehttp or file writer logging\u003c/li\u003e\n\u003cli\u003eimprove main thread speed\u003c/li\u003e\n\u003cli\u003elimited background task pool\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"what-if-something-callback\"\u003eWhat if something callback ?\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-go\"\u003eimport \u0026quot;github.com/ti/nasync\u0026quot;\n\nfunc main() {\n        nasync.Do(func() {\n        \t\tresult := doSometing(\u0026quot;msg\u0026quot;)\n        \t\tfmt.Println(\u0026quot;i am call back by \u0026quot;,result)\n        })\n}\n\nfunc doSometing(msg string) string{\n\treturn \u0026quot;i am done by \u0026quot; + msg\n}\n\n\u003c/code\u003e\u003c/pre\u003e\n","link":"https://github.com/ti/nasync","location":"项目/nasync","tags":["golang"],"title":"NASYNC \n"}